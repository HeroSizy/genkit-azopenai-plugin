name: 🔥 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: 🧪 Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [ '1.21', '1.22', '1.23', '1.24' ]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: 📦 Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: 📁 Verify dependencies
      run: go mod verify

    - name: 🏗️ Build
      run: go build -v ./...

    - name: 🧪 Run tests
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Quality jobs that depend on test job for efficiency
  quality:
    name: 🔍 Quality Checks
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        check: [lint, security, format, mod-tidy]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: 📦 Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.24-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.24-

    - name: 🧹 Run golangci-lint
      if: matrix.check == 'lint'
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=10m

    - name: 🛡️ Run Gosec Security Scanner
      if: matrix.check == 'security'
      uses: securego/gosec@master
      with:
        args: '-no-fail -fmt sarif -out results.sarif ./...'

    - name: 📤 Upload SARIF file
      if: matrix.check == 'security'
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: results.sarif
      continue-on-error: true

    - name: 🔍 Run govulncheck
      if: matrix.check == 'security'
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

    - name: 📐 Check formatting
      if: matrix.check == 'format'
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "❌ The following files are not formatted:"
          gofmt -s -l .
          echo "Run 'gofmt -s -w .' to fix formatting issues"
          exit 1
        fi
        echo "✅ All files are properly formatted"

    - name: 🧹 Check imports
      if: matrix.check == 'format'
      run: |
        go install golang.org/x/tools/cmd/goimports@latest
        if [ "$(goimports -l . | wc -l)" -gt 0 ]; then
          echo "❌ The following files have import issues:"
          goimports -l .
          echo "Run 'goimports -w .' to fix import issues"
          exit 1
        fi
        echo "✅ All imports are properly organized"

    - name: 🧹 Check go mod tidy
      if: matrix.check == 'mod-tidy'
      run: |
        go mod tidy
        git diff --exit-code go.mod
        git diff --exit-code go.sum

  coverage:
    name: 📊 Coverage Report
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: 📦 Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.24-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.24-

    - name: 🧪 Run tests with coverage
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: 📊 Update coverage report
      uses: ncruces/go-coverage-report@v0
      with:
        report: true
        chart: true
        amend: true
      continue-on-error: true 